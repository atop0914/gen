{{define "api_delete.go.tmpl"}}
// Delete{{.StructName}} Delete a single record from {{.TableName}} table in the {{.DatabaseName}} database
// @Summary Delete a record from {{.TableName}}
// @Description Delete a single record from {{.TableName}} table in the {{.DatabaseName}} database
// @Tags {{.StructName}}
// @Accept  json
// @Produce  json
{{range $field := .TableInfo.CodeFields}}{{ if $field.PrimaryKeyArgName}}// @Param  {{ $field.PrimaryKeyArgName }} path {{ $field.SQLMapping.SwaggerType }} true "{{ $field.ColumnMeta.Name }}"{{end}}{{end}}
// @Success 204 {object} {{.modelPackageName}}.{{.StructName}}
// @Failure 400 {object} {{.apiPackageName}}.HTTPError
// @Failure 500 {object} {{.apiPackageName}}.HTTPError
// @Router /{{.StructName | toLower}}{{range $field := .TableInfo.CodeFields}}{{ if $field.PrimaryKeyArgName}}/{ {{- $field.PrimaryKeyArgName -}} }{{end}}{{end}} [delete]
// http DELETE "{{$.serverScheme}}://{{$.serverHost}}{{if ne $.serverPort 80}}:{{$.serverPort}}{{end}}/{{.StructName | toLower}}{{range $field := .TableInfo.CodeFields}}{{ if $field.PrimaryKeyArgName}}/{{ $field.FakeData }}{{end}}{{end}}" X-Api-User:user123
func Delete{{.StructName}}(c *gin.Context) {
	var code int
{{range $field := .TableInfo.CodeFields}}
{{ if $field.PrimaryKeyArgName }}
	{{$field.PrimaryKeyArgName}}, err := {{$field.PrimaryKeyFieldParser}}(c, "{{$field.PrimaryKeyArgName}}")
	if err != nil {
		code = util.ErrParam
		util.OutJsonErrMsg(c, code, err.Error())
		return
	}
{{end}}{{end}}

	_, err := {{.daoPackageName}}.Delete{{.StructName}}(c,{{range $field := .TableInfo.CodeFields}} {{ if $field.PrimaryKeyArgName }} {{$field.PrimaryKeyArgName}},{{end}}{{end -}})
	if err != nil {
		code = util.ErrMySQL
		util.OutJsonErrMsg(c, code, err.Error())
		return
	}

	util.OutJson(c, code, nil)
}
{{end}}
