{{define "api_get.go.tmpl"}}
// Get{{.StructName}} is a function to get a single record from the {{.TableName}} table in the {{.DatabaseName}} database
// @Summary Get record from table {{.StructName}} by {{range $field := .TableInfo.CodeFields}}{{ if $field.PrimaryKeyArgName}} {{ $field.PrimaryKeyArgName }} {{end}}{{end}}
// @Tags {{.StructName}}
{{range $field := .TableInfo.CodeFields}}{{ if $field.PrimaryKeyArgName}}// @ID {{ $field.PrimaryKeyArgName }}{{print "\n"}}{{end}}{{end}} // @Description Get{{.StructName}} is a function to get a single record from the {{.TableName}} table in the {{.DatabaseName}} database
// @Accept  json
// @Produce  json
{{range $field := .TableInfo.CodeFields}}{{ if $field.PrimaryKeyArgName}}// @Param  {{ $field.PrimaryKeyArgName }} path {{ $field.SQLMapping.SwaggerType }} true "{{ $field.ColumnMeta.Name }}"{{print "\n"}}{{end}}{{end}} // @Success 200 {object} {{.modelPackageName}}.{{.StructName}}
// @Failure 400 {object} {{.apiPackageName}}.HTTPError
// @Failure 404 {object} {{.apiPackageName}}.HTTPError "ErrNotFound, db record for id not found - returns NotFound HTTP 404 not found error"
// @Router /{{.StructName | toLower}}{{range $field := .TableInfo.CodeFields}}{{ if $field.PrimaryKeyArgName}}/{ {{- $field.PrimaryKeyArgName -}} }{{end}}{{end}} [get]
// http "{{$.serverScheme}}://{{$.serverHost}}{{if ne $.serverPort 80}}:{{$.serverPort}}{{end}}/{{.StructName | toLower}}{{range $field := .TableInfo.CodeFields}}{{ if $field.PrimaryKeyArgName}}/{{ $field.FakeData }}{{end}}{{end}}" X-Api-User:user123
func Get{{.StructName}}(c *gin.Context) {
	var code int
{{range $field := .TableInfo.CodeFields}}
{{ if $field.PrimaryKeyArgName }}

	{{$field.PrimaryKeyArgName}}, err := {{$field.PrimaryKeyFieldParser}}(c, "{{$field.PrimaryKeyArgName}}")
	if err != nil {
		code = util.ErrParam
		util.OutJsonErrMsg(c, code, err.Error())
		return
	}
{{end}}{{end}}

	record, err := {{.daoPackageName}}.Get{{.StructName}}(c,{{range $field := .TableInfo.CodeFields}} {{ if $field.PrimaryKeyArgName }} {{$field.PrimaryKeyArgName}},{{end}}{{end -}})
	if err != nil {
		code = util.ErrMySQL
		util.OutJsonErrMsg(c, code, err.Error())
		return
	}

	util.OutJson(c, code, record)
}
{{end}}
