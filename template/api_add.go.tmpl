{{define "api_add.go.tmpl"}}
// Add{{.StructName}} add to add a single record to {{.TableName}} table in the {{.DatabaseName}} database
// @Summary Add an record to {{.TableName}} table
// @Description add to add a single record to {{.TableName}} table in the {{.DatabaseName}} database
// @Tags {{.StructName}}
// @Accept  json
// @Produce  json
// @Param {{.StructName}} body {{.modelPackageName}}.{{.StructName}} true "Add {{.StructName}}"
// @Success 200 {object} {{.modelPackageName}}.{{.StructName}}
// @Failure 400 {object} {{.apiPackageName}}.HTTPError
// @Failure 404 {object} {{.apiPackageName}}.HTTPError
// @Router /{{.StructName | toLower}} [post]
// echo '{{ToJSON .TableInfo.Instance 0}}' | http POST "{{$.serverScheme}}://{{$.serverHost}}{{if ne $.serverPort 80}}:{{$.serverPort}}{{end}}/{{.StructName | toLower}}" X-Api-User:user123
func Add{{.StructName}}(c *gin.Context) {
	var code int

	{{.StructName | toLower}} := &{{.modelPackageName}}.{{.StructName}}{}

	if err := c.Bind(&{{.StructName | toLower}}); err != nil {
		code = util.ErrParam
		util.OutJsonErrMsg(c, code, err.Error())
		return
	}

    var err error
	{{.StructName | toLower}}, _, err = {{.daoPackageName}}.Add{{.StructName}}(c, {{.StructName | toLower}})
	if err != nil {
		code = util.ErrMySQL
		util.OutJsonErrMsg(c, code, err.Error())
		return
	}

	util.OutJson(c, code, nil)
}
{{end}}
