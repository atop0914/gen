package {{.apiPackageName}}

import (
	"context"
	"encoding/json"
	"io/ioutil"
	"net/http"
	"strconv"
	"unsafe"

	"{{.daoFQPN}}"
	"{{.modelFQPN}}"

	"github.com/gin-gonic/gin"
	"github.com/julienschmidt/httprouter"
)

var crudEndpoints map[string]*CrudAPI

// CrudAPI describes requests available for tables in the database
type CrudAPI struct {
	Name            string           {{ .Config.JSONTag "name" }}
	CreateURL       string           {{ .Config.JSONTag "create_url" }}
	RetrieveOneURL  string           {{ .Config.JSONTag "retrieve_one_url" }}
	RetrieveManyURL string           {{ .Config.JSONTag "retrieve_many_url" }}
	UpdateURL       string           {{ .Config.JSONTag "update_url" }}
	DeleteURL       string           {{ .Config.JSONTag "delete_url" }}
	FetchDDLURL     string           {{ .Config.JSONTag "fetch_ddl_url" }}
	TableInfo       *{{.modelPackageName}}.TableInfo {{ .Config.JSONTag "table_info" }}
}

type CommonResponse struct {
	Code int         `json:"code"`
	Data interface{} `json:"data"`
	Err  bool        `json:"err"`
	Msg  string      `json:"msg"`
}

// PagedRequest request for pages GetAll results.
type PagedRequest struct {
	Page     int    `json:"page"`
	PageSize int    `json:"page_size"`
	Order    string `json:"order"`
}

// PagedResult results for pages GetAll results.
type PagedResult struct {
	Data         interface{} `json:"list"`
	TotalRecords int64       `json:"total"`
}

// HTTPError example
type HTTPError struct {
	Code    int    `json:"{{ .Config.JSONFieldName "code" }}" example:"400"`
	Message string `json:"{{ .Config.JSONFieldName "message"}}" example:"status bad request"`
}


// ConfigRouter configure http.Handler router
func ConfigRouter() http.Handler {
	router := httprouter.New()
	{{range $tableName, $codeInfo := .tableInfos}}config{{$codeInfo.StructName}}Router(router)
    {{end}}

	return router
}


// ConfigGinRouter configure gin router
func ConfigGinRouter(router gin.IRoutes) {
	{{range $tableName, $codeInfo := .tableInfos}}configGin{{$codeInfo.StructName}}Router(router)
	{{end}}

	return
}


// ConverHttprouterToGin wrap httprouter.Handle to gin.HandlerFunc
func ConverHttprouterToGin(f httprouter.Handle) gin.HandlerFunc {
	return func(c *gin.Context) {
		var params httprouter.Params
		_len := len(c.Params)
		if _len == 0 {
			params = nil
		} else {
			params = ((*[1 << 10]httprouter.Param)(unsafe.Pointer(&c.Params[0])))[:_len]
		}

		f(c.Writer, c.Request, params)
	}
}



func initializeContext(r *http.Request) (ctx context.Context) {
	if ContextInitializer != nil {
		ctx = ContextInitializer(r)
	} else {
		ctx = r.Context()
	}
	return ctx
}


func ValidateRequest(ctx context.Context, r *http.Request, table string, action {{$.modelPackageName}}.Action) error {
	if RequestValidator != nil {
		return RequestValidator(ctx, r, table, action)
	}

	return nil
}

type RequestValidatorFunc func(ctx context.Context, r *http.Request, table string, action {{$.modelPackageName}}.Action) error

var RequestValidator RequestValidatorFunc

type ContextInitializerFunc func(r *http.Request) (ctx context.Context)

var ContextInitializer ContextInitializerFunc




func readInt(r *http.Request, param string, v int64) (int64, error) {
	p := r.FormValue(param)
	if p == "" {
		return v, nil
	}

	return strconv.ParseInt(p, 10, 64)
}

func writeJSON(ctx context.Context, w http.ResponseWriter, v interface{}) {
	data, _ := json.Marshal(v)
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("Cache-Control", "no-cache")
	w.Write(data)
}

func writeRowsAffected(w http.ResponseWriter, rowsAffected int64) {
	data, _ := json.Marshal(rowsAffected)
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("Cache-Control", "no-cache")
	w.Write(data)
}

func readJSON(r *http.Request, v interface{}) error {
	buf, err := ioutil.ReadAll(r.Body)
	if err != nil {
		return err
	}

	return json.Unmarshal(buf, v)
}

func parseUint8(c *gin.Context, key string) (uint8, error) {
	idStr := c.Param(key)
	id, err := strconv.ParseInt(idStr, 10, 8)
	if err != nil {
		return 0, err
	}
	return uint8(id), err
}

func parseUint16(c *gin.Context, key string) (uint16, error) {
	idStr := c.Param(key)
	id, err := strconv.ParseInt(idStr, 10, 16)
	if err != nil {
		return 0, err
	}
	return uint16(id), err
}
func parseUint32(c *gin.Context, key string) (uint32, error) {
	idStr := c.Param(key)
	id, err := strconv.ParseInt(idStr, 10, 32)
	if err != nil {
		return 0, err
	}
	return uint32(id), err
}
func parseUint64(c *gin.Context, key string) (uint64, error) {
	idStr := c.Param(key)
	id, err := strconv.ParseInt(idStr, 10, 64)
	if err != nil {
		return 0, err
	}
	return uint64(id), err
}
func parseInt(c *gin.Context, key string) (int, error) {
	idStr := c.Param(key)
	id, err := strconv.ParseInt(idStr, 10, 64)
	if err != nil {
		return -1, err
	}
	return int(id), err
}
func parseInt8(c *gin.Context, key string) (int8, error) {
	idStr := c.Param(key)
	id, err := strconv.ParseInt(idStr, 10, 8)
	if err != nil {
		return -1, err
	}
	return int8(id), err
}
func parseInt16(c *gin.Context, key string) (int16, error) {
	idStr := c.Param(key)
	id, err := strconv.ParseInt(idStr, 10, 16)
	if err != nil {
		return -1, err
	}
	return int16(id), err
}
func parseInt32(c *gin.Context, key string) (int32, error) {
	idStr := c.Param(key)
	id, err := strconv.ParseInt(idStr, 10, 32)
	if err != nil {
		return -1, err
	}
	return int32(id), err
}
func parseInt64(c *gin.Context, key string) (int64, error) {
	idStr := c.Param(key)
	id, err := strconv.ParseInt(idStr, 10, 64)
	if err != nil {
		return -1, err
	}
	return id, err
}
func parseString(c *gin.Context, key string) (string, error) {
	idStr := c.Param(key)
	return idStr, nil
}
func parseUUID(c *gin.Context, key string) (string, error) {
	idStr := c.Param(key)
	return idStr, nil
}

func parseBytes(c *gin.Context, key string) (string, error) {
	idStr := c.Param(key)
	return idStr, nil
}

func init() {
	crudEndpoints = make(map[string]*CrudAPI)

	var tmp *CrudAPI
    {{ range $tableName, $tableInfo := .tableInfos }}
	tmp = &CrudAPI{
		Name: "{{$tableName}}",
		CreateURL: "/{{$tableInfo.StructName | toLower}}",
		RetrieveOneURL: "/{{$tableInfo.StructName | toLower}}",
		RetrieveManyURL: "/{{$tableInfo.StructName | toLower}}",
		UpdateURL: "/{{$tableInfo.StructName | toLower}}",
		DeleteURL: "/{{$tableInfo.StructName | toLower}}",
		FetchDDLURL: "/ddl/{{$tableName}}",
	}

	tmp.TableInfo, _ = {{$.modelPackageName}}.GetTableInfo("{{$tableName}}")
	crudEndpoints["{{$tableName}}"] = tmp

	{{end}}
}

